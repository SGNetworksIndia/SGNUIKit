/*
 * Copyright (c) 2022-2023 SGNetworks. All rights reserved.
 *
 * The software is an exclusive copyright of "SGNetworks" and is provided as is exclusively with only "USAGE" access. "Modification",  "Alteration", "Re-distribution" is completely prohibited.
 * VIOLATING THE ABOVE TERMS IS A PUNISHABLE OFFENSE WHICH MAY LEAD TO LEGAL CONSEQUENCES.
 */

Date.prototype.toUnixTime = function() { return this.getTime() / 1000 | 0; };
Date.time = function() { return new Date().toUnixTime(); };

const argv = process.argv,
      info = require("../package.json");
const args    = {},
      cdn_dir = "E:\\home\\sgn\\public_html\\cdn\\jquery\\plugins\\SGNetworks\\SGNUIKit\\";
//const SGNUIKitLoader = "";
const SGNUIKitLoader = "";
for(let i = 2; i < argv.length; i++) {
	const v = argv[i].replace("--", "");
	i++;
	args[v] = argv[i];
}

const v = info.version.split(".");

const version = {
	"major": v[0] | 0,
	"minor": v[1] | 0,
	"patch": v[2] | 0,
};

module.exports = {
	args, SGNUIKitLoader, version, cdn_dir,
};
