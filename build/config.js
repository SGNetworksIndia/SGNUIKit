/*
 * Copyright (c) 2022-2023 SGNetworks. All rights reserved.
 *
 * The software is an exclusive copyright of "SGNetworks" and is provided as is exclusively with only "USAGE" access. "Modification",  "Alteration", "Re-distribution" is completely prohibited.
 * VIOLATING THE ABOVE TERMS IS A PUNISHABLE OFFENSE WHICH MAY LEAD TO LEGAL CONSEQUENCES.
 */

Date.prototype.toUnixTime = function() { return this.getTime() / 1000 | 0; };
Date.time = function() { return new Date().toUnixTime(); };

const argv = process.argv,
      info = require("../package.json");
const args    = {},
      cdn_dir = "E:\\home\\sgn\\public_html\\cdn\\jquery\\plugins\\SGNetworks\\SGNUIKit\\";
const SGNUIKitLoader = "LyoNCiAqIENvcHlyaWdodCAoYykgMjAyMiBTR05ldHdvcmtzLiBBbGwgcmlnaHRzIHJlc2VydmVkLg0KICoNCiAqIFRoZSBzb2Z0d2FyZSBpcyBhbiBleGNsdXNpdmUgY29weXJpZ2h0IG9mICJTR05ldHdvcmtzIiBhbmQgaXMgcHJvdmlkZWQgYXMgaXMgZXhjbHVzaXZlbHkgd2l0aCBvbmx5ICJVU0FHRSIgYWNjZXNzLiAiTW9kaWZpY2F0aW9uIiwgICJBbHRlcmF0aW9uIiwgIlJlLWRpc3RyaWJ1dGlvbiIgaXMgY29tcGxldGVseSBwcm9oaWJpdGVkLg0KICogVklPTEFUSU5HIFRIRSBBQk9WRSBURVJNUyBJUyBBIFBVTklTSEFCTEUgT0ZGRU5TRSBXSElDSCBNQVkgTEVBRCBUTyBMRUdBTCBDT05TRVFVRU5DRVMuDQogKi8NCg0KY29uc3QgU0dOVUlLaXQgPSB7DQoJaXNSZWFkeTogZmFsc2UsDQoJY29tcG9uZW50czoge30sDQoJb25DaGFuZ2VMaXN0ZW5lcjogW10sDQoJb25SZWFkeUxpc3RlbmVyOiBbXSwNCg0KCS8qKg0KCSAqIFRoaXMgY2FsbGJhY2sgaXMgY2FsbGVkIHdoZW4gYSBjb21wb25lbnQgaXMgbG9hZGVkL3JlbW92ZWQgb3IgdGhlIHN0YXR1cyBvZiByZWFkaW5lc3MgaXMgY2hhbmdlZC4NCgkgKg0KCSAqIEBjYWxsYmFjayBTR05VSUtpdENoYW5nZUNhbGxiYWNrDQoJICogQHBhcmFtIHtzdHJpbmd9IHN0YXRlIFRoZSBuYW1lIG9mIHRoZSBzdGF0ZSB3aGljaCBpcyBjaGFuZ2VkLg0KCSAqIEBwYXJhbSB7Ym9vbGVhbnxKU09OfSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIHN0YXRlIHdoaWNoIGlzIGNoYW5nZWQuDQoJICogQHBhcmFtIHtKU09OfSBjb21wb25lbnRzIFRoZSA8Yj48aT5KU09OPC9pPjwvYj4gb2JqZWN0IG9mIGxvYWRlZCA8Yj5TR05VSUtpdDwvYj4gY29tcG9uZW50cywgb3IgYW4gZW1wdHkgPGI+PGk+SlNPTjwvaT48L2I+IG9iamVjdCBpZiBubyBjb21wb25lbnRzIGxvYWRlZC4NCgkgKi8NCgkvKioNCgkgKiBUaGlzIGNhbGxiYWNrIGlzIGNhbGxlZCB3aGVuIDxiPlNHTlVJS2l0PC9iPiBpcyByZWFkeS4NCgkgKg0KCSAqIEBjYWxsYmFjayBTR05VSUtpdFJlYWR5Q2FsbGJhY2sNCgkgKiBAcGFyYW0ge2Jvb2xlYW59IGlzUmVhZHkgdGhlIHN0YXR1cyBvZiByZWFkaW5lc3Mgb2YgPGI+U0dOVUlLaXQ8L2I+Lg0KCSAqLw0KDQoJLyoqDQoJICogQWRkIGEgbG9hZGVkIDxiPlNHTlVJS2l0PC9iPiBjb21wb25lbnQuDQoJICoNCgkgKiBAcGFyYW0ge0pTT059IHZhbHVlIFRoZSA8Yj48aT5KU09OPC9pPjwvYj4gb2JqZWN0IG9mIHRoZSBsb2FkZWQgPGI+U0dOVUlLaXQ8L2I+IGNvbXBvbmVudC4NCgkgKi8NCglzZXQgY29tcG9uZW50KHZhbHVlKSB7DQoJCWlmKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09ICIiKQ0KCQkJdmFsdWUgPSB7fTsNCgkJT2JqZWN0LmFzc2lnbih0aGlzLmNvbXBvbmVudHMsIHZhbHVlKTsNCg0KCQl0aGlzLm9uQ2hhbmdlTGlzdGVuZXIuZm9yRWFjaCgobGlzdGVuZXIpID0+IGxpc3RlbmVyKCJjb21wb25lbnRzIiwgdmFsdWUsIHRoaXMuY29tcG9uZW50cykpOw0KCX0sDQoNCgkvKioNCgkgKiBHZXQgdGhlIGxpc3Qgb2YgbG9hZGVkIDxiPlNHTlVJS2l0PC9iPiBjb21wb25lbnRzLg0KCSAqDQoJICogQHJldHVybiB7b2JqZWN0fSBUaGUgPGI+PGk+SlNPTjwvaT48L2I+IG9iamVjdCBvZiBsb2FkZWQgPGI+U0dOVUlLaXQ8L2I+IGNvbXBvbmVudHMsIG9yIGFuIGVtcHR5IDxiPjxpPkpTT048L2k+PC9iPiBvYmplY3QgaWYgbm8gY29tcG9uZW50cyBsb2FkZWQuDQoJICovDQoJZ2V0IGNvbXBvbmVudCgpIHsNCgkJcmV0dXJuIHRoaXMuY29tcG9uZW50czsNCgl9LA0KDQoJLyoqDQoJICogU2V0IHRoZSBzdGF0dXMgb2YgcmVhZGluZXNzIG9mIDxiPlNHTlVJS2l0PC9iPi4NCgkgKg0KCSAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNSZWFkeSBUaGUgdGhlIHN0YXR1cyBvZiByZWFkaW5lc3Mgb2YgPGI+U0dOVUlLaXQ8L2I+Lg0KCSAqLw0KCXNldCByZWFkeShpc1JlYWR5KSB7DQoJCXRoaXMuaXNSZWFkeSA9IGlzUmVhZHk7DQoJCXRoaXMub25DaGFuZ2VMaXN0ZW5lci5mb3JFYWNoKChsaXN0ZW5lcikgPT4gbGlzdGVuZXIoInJlYWR5IiwgdGhpcy5pc1JlYWR5KSk7DQoNCgkJaWYoaXNSZWFkeSkNCgkJCXRoaXMub25SZWFkeUxpc3RlbmVyLmZvckVhY2goKGxpc3RlbmVyKSA9PiBsaXN0ZW5lcihpc1JlYWR5KSk7DQoJfSwNCg0KCS8qKg0KCSAqIEdldCB0aGUgc3RhdHVzIG9mIHJlYWRpbmVzcyBvZiA8Yj5TR05VSUtpdDwvYj4uDQoJICoNCgkgKiBAcmV0dXJuIHtib29sZWFufSA8Yj48aT5UUlVFPC9pPjwvYj4gaWYgPGI+U0dOVUlLaXQ8L2I+IGlzIHJlYWR5LCA8Yj48aT5GQUxTRTwvaT48L2I+IG90aGVyd2lzZS4NCgkgKi8NCglnZXQgcmVhZHkoKSB7DQoJCXJldHVybiB0aGlzLmlzUmVhZHk7DQoJfSwNCg0KCS8qKg0KCSAqIFNldCB0aGUgaGFuZGxlciBmb3IgPGI+U0dOVUlLaXQ8L2I+IDxiPjxpPk9uQ2hhbmdlPC9pPjwvYj4gZXZlbnQsIHdoaWNoIHdpbGwgYmUgdHJpZ2dlcmVkIHdoZW4gYSBjb21wb25lbnQgaXMgbG9hZGVkL3JlbW92ZWQgb3IgdGhlIHN0YXR1cyBvZiByZWFkaW5lc3MgaXMgY2hhbmdlZC4NCgkgKg0KCSAqIEBwYXJhbSB7U0dOVUlLaXRDaGFuZ2VDYWxsYmFja31saXN0ZW5lcg0KCSAqLw0KCXNldE9uQ2hhbmdlTGlzdGVuZXI6IGZ1bmN0aW9uKGxpc3RlbmVyKSB7DQoJCXRoaXMub25DaGFuZ2VMaXN0ZW5lci5wdXNoKGxpc3RlbmVyKTsNCgl9LA0KDQoJLyoqDQoJICogU2V0IHRoZSBoYW5kbGVyIGZvciA8Yj5TR05VSUtpdDwvYj4gPGI+PGk+T25SZWFkeTwvaT48L2I+IGV2ZW50LCB3aGljaCB3aWxsIGJlIHRyaWdnZXJlZCB3aGVuIHRoZSA8Yj5TR05VSUtpdDwvYj4gaXMgcmVhZHkuDQoJICoNCgkgKiBAcGFyYW0ge1NHTlVJS2l0UmVhZHlDYWxsYmFja31saXN0ZW5lcg0KCSAqLw0KCXNldE9uUmVhZHlMaXN0ZW5lcjogZnVuY3Rpb24obGlzdGVuZXIpIHsNCgkJdGhpcy5vblJlYWR5TGlzdGVuZXIucHVzaChsaXN0ZW5lcik7DQoNCgkJaWYodGhpcy5yZWFkeSkNCgkJCXRoaXMub25SZWFkeUxpc3RlbmVyLmZvckVhY2goKGxpc3RlbmVyKSA9PiBsaXN0ZW5lcih0aGlzLnJlYWR5KSk7DQoJfSwNCn07DQp3aW5kb3cuU0dOVUlLaXQgPSBTR05VSUtpdDsNCg0KY29uc3QgdW50aWwgPSAocHJlZGljYXRlRm4pID0+IHsNCgljb25zdCBwb2xsID0gKGRvbmUpID0+IChwcmVkaWNhdGVGbigpID8gZG9uZSgpIDogc2V0VGltZW91dCgoKSA9PiBwb2xsKGRvbmUpLCA1MDApKTsNCglyZXR1cm4gbmV3IFByb21pc2UocG9sbCk7DQp9Ow0KDQphc3luYyBmdW5jdGlvbiBwYXVzZSh2KSB7DQoJd2hpbGUodiA8IDEwMCkNCgkJYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTsNCn0NCg0KZnVuY3Rpb24gbG9vcChsaWdodGJveEltYWdlcywgaW5kZXgpIHsNCglpZihpbmRleCA9PT0gbGlnaHRib3hJbWFnZXMubGVuZ3RoKSByZXR1cm47DQoNCglsaWdodGJveEltYWdlc1tpbmRleF0ub25sb2FkID0gZnVuY3Rpb24oKSB7DQoJCWNvbnNvbGUubG9nKCJpbWFnZSAiICsgaW5kZXggKyAiIGxvYWRlZC4iKTsNCgkJbG9vcChsaWdodGJveEltYWdlcywgKytpbmRleCk7DQoJfTsNCn0NCg0KKGFzeW5jIGZ1bmN0aW9uKHByZWNhbGxiYWNrKSB7DQoJY29uc3QgdGl0bGUgPSBkb2N1bWVudC50aXRsZTsNCglpZih0aXRsZSAhPT0gdW5kZWZpbmVkKQ0KCQlkb2N1bWVudC50aXRsZSA9ICJMb2FkaW5nLi4uIjsNCg0KCWlmKHdpbmRvdy5qUXVlcnkpDQoJCSQuaG9sZFJlYWR5KHRydWUpOw0KDQoJKCgpID0+IHsNCgkJY29uc3QgY3NzID0gYC8qDQogKiBDb3B5cmlnaHQgKGMpIDIwMjIgU0dOZXR3b3Jrcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4NCiAqDQogKiBUaGUgc29mdHdhcmUgaXMgYW4gZXhjbHVzaXZlIGNvcHlyaWdodCBvZiAiU0dOZXR3b3JrcyIgYW5kIGlzIHByb3ZpZGVkIGFzIGlzIGV4Y2x1c2l2ZWx5IHdpdGggb25seSAiVVNBR0UiIGFjY2Vzcy4gIk1vZGlmaWNhdGlvbiIsICAiQWx0ZXJhdGlvbiIsICJSZS1kaXN0cmlidXRpb24iIGlzIGNvbXBsZXRlbHkgcHJvaGliaXRlZC4NCiAqIFZJT0xBVElORyBUSEUgQUJPVkUgVEVSTVMgSVMgQSBQVU5JU0hBQkxFIE9GRkVOU0UgV0hJQ0ggTUFZIExFQUQgVE8gTEVHQUwgQ09OU0VRVUVOQ0VTLg0KICovDQoNCi5oYXMtcHJlbG9hZGVyLA0KLmhhcy1wcmVsb2FkZXIgKiB7DQpcdC0tc2duLWJhY2tncm91bmQ6ICNmZmY7DQpcdC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoOiA2cHg7DQpcdC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXdpZHRoOiA0NHB4Ow0KXHQtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1oZWlnaHQ6IDIycHg7DQpcdC0tc2duLXByZWxvYWRlci1jaXJjbGVzLW1hcmdpbjogMXB4Ow0KXHQtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1yYWRpdXM6IDZweDsNCn0NCg0KQG1lZGlhIGFsbCBhbmQgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKSB7DQpcdC5oYXMtcHJlbG9hZGVyLA0KXHQuaGFzLXByZWxvYWRlciAqIHsNClx0LS1zZ24tYmFja2dyb3VuZDogIzAwMDsNClx0fQ0KfQ0KDQpib2R5IHsNClx0bWFyZ2luOiAwOw0KfQ0KDQouc2duLXByZWxvYWRlciB7DQpcdHBhZGRpbmc6IDA7DQpcdHdpZHRoOiAxMDAlOw0KXHRoZWlnaHQ6IDEwMCU7DQpcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNnbi1iYWNrZ3JvdW5kKTsNClx0ZGlzcGxheTogZmxleDsNClx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQpcdGFsaWduLWl0ZW1zOiBjZW50ZXI7DQpcdHBvc2l0aW9uOiBhYnNvbHV0ZTsNClx0ei1pbmRleDogOTk5OTk5Ow0KfQ0KDQoNCi5zZ24tcHJlbG9hZGVyID4gLnByZWxvYWRlciB7DQpcdHBvc2l0aW9uOiByZWxhdGl2ZTsNClx0ZGlzcGxheTogaW5saW5lLWZsZXg7DQpcdGp1c3RpZnktY29udGVudDogY2VudGVyOw0KXHRhbGlnbi1pdGVtczogY2VudGVyOw0KfQ0KDQouc2duLXByZWxvYWRlciA+IC5wcmVsb2FkZXIgPiAuc3Bpbm5lciB7DQpcdGFuaW1hdGlvbjogcm90YXRlIDEwcyBpbmZpbml0ZSBsaW5lYXI7DQpcdHBvc2l0aW9uOiByZWxhdGl2ZTsNClx0ZGlzcGxheTogaW5saW5lLWZsZXg7DQpcdGp1c3RpZnktY29udGVudDogY2VudGVyOw0KXHRhbGlnbi1pdGVtczogY2VudGVyOw0KXHR3aWR0aDogMTAwJTsNClx0aGVpZ2h0OiAxMDAlOw0KfQ0KDQoNCi5zZ24tcHJlbG9hZGVyID4gLnByZWxvYWRlciA+IGltZyB7DQpcdHdpZHRoOiAxMDAlOw0KXHRoZWlnaHQ6IDEwMCU7DQpcdG1hcmdpbjogdmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLW1hcmdpbik7DQpcdGRpc3BsYXk6IGZsZXg7DQpcdGp1c3RpZnktY29udGVudDogY2VudGVyOw0KXHRhbGlnbi1pdGVtczogY2VudGVyOw0KXHRwb3NpdGlvbjogcmVsYXRpdmU7DQpcdHRvcDogNTAlOw0KXHRsZWZ0OiA1MCU7DQp9DQouc2duLXByZWxvYWRlciA+IC5wcmVsb2FkZXIgPiAuc3Bpbm5lciA+IGltZyB7DQpcdHdpZHRoOiBjYWxjKHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy13aWR0aCkpOw0KXHRoZWlnaHQ6IGNhbGModmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXdpZHRoKSk7DQpcdG1hcmdpbjogdmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLW1hcmdpbik7DQp9DQouc2duLXByZWxvYWRlciA+IC5wcmVsb2FkZXIgPiAuc3Bpbm5lciA+IGkgew0KXHRhbmltYXRpb246IHJvdGF0ZSAzcyBpbmZpbml0ZSBjdWJpYy1iZXppZXIoMC4wOSwgMC42LCAwLjgsIDAuMDMpOw0KXHR0cmFuc2Zvcm0tb3JpZ2luOiA1MCUgMTAwJSAwOw0KXHRwb3NpdGlvbjogYWJzb2x1dGU7DQpcdGRpc3BsYXk6IGlubGluZS1mbGV4Ow0KXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNClx0YWxpZ24taXRlbXM6IGNlbnRlcjsNClx0dG9wOiA1MCU7DQpcdGxlZnQ6IDUwJTsNClx0Ym9yZGVyOiBzb2xpZCB2YXIoLS1zZ24tcHJlbG9hZGVyLXN0cmlwZXMtd2lkdGgpIHRyYW5zcGFyZW50Ow0KXHRib3JkZXItYm90dG9tOiBub25lOw0KfQ0KLnNnbi1wcmVsb2FkZXIgPiAucHJlbG9hZGVyID4gLnNwaW5uZXIgPiBpOm50aC1jaGlsZCgxKSB7DQpcdC1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMDksIDAuMywgMC4xMiwgMC4wMyk7DQpcdC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMDksIDAuMywgMC4xMiwgMC4wMyk7DQpcdGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjA5LCAwLjMsIDAuMTIsIDAuMDMpOw0KXHR3aWR0aDogdmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXdpZHRoKTsNClx0aGVpZ2h0OiB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtaGVpZ2h0KTsNClx0bWFyZ2luLXRvcDogY2FsYygwcHggLSB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtaGVpZ2h0KSk7DQpcdG1hcmdpbi1sZWZ0OiBjYWxjKDBweCAtIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1oZWlnaHQpKTsNClx0Ym9yZGVyLWNvbG9yOiAjMjE3MmI4Ow0KXHRib3JkZXItdG9wLWxlZnQtcmFkaXVzOiBjYWxjKCh2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtd2lkdGgpICsgKCh2YXIoLS1zZ24tcHJlbG9hZGVyLXN0cmlwZXMtd2lkdGgpICsgdmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLW1hcmdpbikpICogMikgKiAxKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1yYWRpdXMpKTsNClx0Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IGNhbGMoKHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy13aWR0aCkgKyAoKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkgKiAyKSAqIDEpICsgdmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXJhZGl1cykpOw0KfQ0KLnNnbi1wcmVsb2FkZXIgPiAucHJlbG9hZGVyID4gLnNwaW5uZXIgPiBpOm50aC1jaGlsZCgyKSB7DQpcdC1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMDksIDAuNiwgMC4yNCwgMC4wMyk7DQpcdC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMDksIDAuNiwgMC4yNCwgMC4wMyk7DQpcdGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjA5LCAwLjYsIDAuMjQsIDAuMDMpOw0KXHR3aWR0aDogY2FsYyh2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtd2lkdGgpICsgKCh2YXIoLS1zZ24tcHJlbG9hZGVyLXN0cmlwZXMtd2lkdGgpICsgdmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLW1hcmdpbikpICogMikpOw0KXHRoZWlnaHQ6IGNhbGModmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLWhlaWdodCkgKyAodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSk7DQpcdG1hcmdpbi10b3A6IGNhbGMoMHB4IC0gKHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1oZWlnaHQpICsgKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkpKTsNClx0bWFyZ2luLWxlZnQ6IGNhbGMoMHB4IC0gKHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1oZWlnaHQpICsgKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkpKTsNClx0Ym9yZGVyLWNvbG9yOiAjMThhMzliOw0KXHRib3JkZXItdG9wLWxlZnQtcmFkaXVzOiBjYWxjKCh2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtd2lkdGgpICsgKCh2YXIoLS1zZ24tcHJlbG9hZGVyLXN0cmlwZXMtd2lkdGgpICsgdmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLW1hcmdpbikpICogMikgKiAyKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1yYWRpdXMpKTsNClx0Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IGNhbGMoKHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy13aWR0aCkgKyAoKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkgKiAyKSAqIDIpICsgdmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXJhZGl1cykpOw0KfQ0KLnNnbi1wcmVsb2FkZXIgPiAucHJlbG9hZGVyID4gLnNwaW5uZXIgPiBpOm50aC1jaGlsZCgzKSB7DQpcdC1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMDksIDAuOSwgMC4zNiwgMC4wMyk7DQpcdC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMDksIDAuOSwgMC4zNiwgMC4wMyk7DQpcdGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjA5LCAwLjksIDAuMzYsIDAuMDMpOw0KXHR3aWR0aDogY2FsYyh2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtd2lkdGgpICsgKCh2YXIoLS1zZ24tcHJlbG9hZGVyLXN0cmlwZXMtd2lkdGgpICsgdmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLW1hcmdpbikpICogMikgKiAyKTsNClx0aGVpZ2h0OiBjYWxjKHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1oZWlnaHQpICsgKCh2YXIoLS1zZ24tcHJlbG9hZGVyLXN0cmlwZXMtd2lkdGgpICsgdmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLW1hcmdpbikpICogMikpOw0KXHRtYXJnaW4tdG9wOiBjYWxjKDBweCAtICh2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtaGVpZ2h0KSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDIpKSk7DQpcdG1hcmdpbi1sZWZ0OiBjYWxjKDBweCAtICh2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtaGVpZ2h0KSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDIpKSk7DQpcdGJvcmRlci1jb2xvcjogIzgyYzU0NTsNClx0Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czogY2FsYygodmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXdpZHRoKSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDIpICogMikgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtcmFkaXVzKSk7DQpcdGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiBjYWxjKCh2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtd2lkdGgpICsgKCh2YXIoLS1zZ24tcHJlbG9hZGVyLXN0cmlwZXMtd2lkdGgpICsgdmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLW1hcmdpbikpICogMikgKiAyKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1yYWRpdXMpKTsNCn0NCi5zZ24tcHJlbG9hZGVyID4gLnByZWxvYWRlciA+IC5zcGlubmVyID4gaTpudGgtY2hpbGQoNCkgew0KXHQtbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjA5LCAxLjIsIDAuNDgsIDAuMDMpOw0KXHQtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjA5LCAxLjIsIDAuNDgsIDAuMDMpOw0KXHRhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4wOSwgMS4yLCAwLjQ4LCAwLjAzKTsNClx0d2lkdGg6IGNhbGModmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXdpZHRoKSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDIpICogMyk7DQpcdGhlaWdodDogY2FsYyh2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtaGVpZ2h0KSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDIpICogMS41KTsNClx0bWFyZ2luLXRvcDogY2FsYygwcHggLSAodmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLWhlaWdodCkgKyAoKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkgKiAzKSkpOw0KXHRtYXJnaW4tbGVmdDogY2FsYygwcHggLSAodmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLWhlaWdodCkgKyAoKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkgKiAzKSkpOw0KXHRib3JkZXItY29sb3I6ICNmOGI3Mzk7DQpcdGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IGNhbGMoKHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy13aWR0aCkgKyAoKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkgKiAyKSAqIDMpICsgdmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXJhZGl1cykpOw0KXHRib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogY2FsYygodmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXdpZHRoKSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDIpICogMykgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtcmFkaXVzKSk7DQp9DQouc2duLXByZWxvYWRlciA+IC5wcmVsb2FkZXIgPiAuc3Bpbm5lciA+IGk6bnRoLWNoaWxkKDUpIHsNClx0LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4wOSwgMS41LCAwLjYsIDAuMDMpOw0KXHQtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjA5LCAxLjUsIDAuNiwgMC4wMyk7DQpcdGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjA5LCAxLjUsIDAuNiwgMC4wMyk7DQpcdHdpZHRoOiBjYWxjKHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy13aWR0aCkgKyAoKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkgKiAyKSAqIDQpOw0KXHRoZWlnaHQ6IGNhbGModmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLWhlaWdodCkgKyAoKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkgKiAyKSAqIDIpOw0KXHRtYXJnaW4tdG9wOiBjYWxjKDBweCAtICh2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtaGVpZ2h0KSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDQpKSk7DQpcdG1hcmdpbi1sZWZ0OiBjYWxjKDBweCAtICh2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtaGVpZ2h0KSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDQpKSk7DQpcdGJvcmRlci1jb2xvcjogI2YwNjA0NTsNClx0Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czogY2FsYygodmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXdpZHRoKSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDIpICogNCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtcmFkaXVzKSk7DQpcdGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiBjYWxjKCh2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtd2lkdGgpICsgKCh2YXIoLS1zZ24tcHJlbG9hZGVyLXN0cmlwZXMtd2lkdGgpICsgdmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLW1hcmdpbikpICogMikgKiA0KSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1yYWRpdXMpKTsNCn0NCi5zZ24tcHJlbG9hZGVyID4gLnByZWxvYWRlciA+IC5zcGlubmVyID4gaTpudGgtY2hpbGQoNikgew0KXHQtbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjA5LCAxLjgsIDAuNzIsIDAuMDMpOw0KXHQtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjA5LCAxLjgsIDAuNzIsIDAuMDMpOw0KXHRhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4wOSwgMS44LCAwLjcyLCAwLjAzKTsNClx0d2lkdGg6IGNhbGModmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXdpZHRoKSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDIpICogNSk7DQpcdGhlaWdodDogY2FsYyh2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtaGVpZ2h0KSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDIpICogMi41KTsNClx0bWFyZ2luLXRvcDogY2FsYygwcHggLSAodmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLWhlaWdodCkgKyAoKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkgKiA1KSkpOw0KXHRtYXJnaW4tbGVmdDogY2FsYygwcHggLSAodmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLWhlaWdodCkgKyAoKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkgKiA1KSkpOw0KXHRib3JkZXItY29sb3I6ICNlZDI4NjE7DQpcdGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IGNhbGMoKHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy13aWR0aCkgKyAoKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkgKiAyKSAqIDUpICsgdmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXJhZGl1cykpOw0KXHRib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogY2FsYygodmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXdpZHRoKSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDIpICogNSkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtcmFkaXVzKSk7DQp9DQouc2duLXByZWxvYWRlciA+IC5wcmVsb2FkZXIgPiAuc3Bpbm5lciA+IGk6bnRoLWNoaWxkKDcpIHsNClx0LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4wOSwgMi4xLCAwLjg0LCAwLjAzKTsNClx0LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4wOSwgMi4xLCAwLjg0LCAwLjAzKTsNClx0YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMDksIDIuMSwgMC44NCwgMC4wMyk7DQpcdHdpZHRoOiBjYWxjKHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy13aWR0aCkgKyAoKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkgKiAyKSAqIDYpOw0KXHRoZWlnaHQ6IGNhbGModmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLWhlaWdodCkgKyAoKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkgKiAyKSAqIDMpOw0KXHRtYXJnaW4tdG9wOiBjYWxjKDBweCAtICh2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtaGVpZ2h0KSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDYpKSk7DQpcdG1hcmdpbi1sZWZ0OiBjYWxjKDBweCAtICh2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtaGVpZ2h0KSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDYpKSk7DQpcdGJvcmRlci1jb2xvcjogI2MxMjY4MDsNClx0Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czogY2FsYygodmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXdpZHRoKSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDIpICogNikgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtcmFkaXVzKSk7DQpcdGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiBjYWxjKCh2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtd2lkdGgpICsgKCh2YXIoLS1zZ24tcHJlbG9hZGVyLXN0cmlwZXMtd2lkdGgpICsgdmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLW1hcmdpbikpICogMikgKiA2KSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1yYWRpdXMpKTsNCn0NCi5zZ24tcHJlbG9hZGVyID4gLnByZWxvYWRlciA+IC5zcGlubmVyID4gaTpudGgtY2hpbGQoOCkgew0KXHQtbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjA5LCAyLjQsIDAuOTYsIDAuMDMpOw0KXHQtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjA5LCAyLjQsIDAuOTYsIDAuMDMpOw0KXHRhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4wOSwgMi40LCAwLjk2LCAwLjAzKTsNClx0d2lkdGg6IGNhbGModmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXdpZHRoKSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDIpICogNyk7DQpcdGhlaWdodDogY2FsYyh2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtaGVpZ2h0KSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDIpICogMy41KTsNClx0bWFyZ2luLXRvcDogY2FsYygwcHggLSAodmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLWhlaWdodCkgKyAoKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkgKiA3KSkpOw0KXHRtYXJnaW4tbGVmdDogY2FsYygwcHggLSAodmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLWhlaWdodCkgKyAoKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkgKiA3KSkpOw0KXHRib3JkZXItY29sb3I6ICM1ZDMxOTE7DQpcdGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IGNhbGMoKHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy13aWR0aCkgKyAoKHZhcigtLXNnbi1wcmVsb2FkZXItc3RyaXBlcy13aWR0aCkgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtbWFyZ2luKSkgKiAyKSAqIDcpICsgdmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXJhZGl1cykpOw0KXHRib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogY2FsYygodmFyKC0tc2duLXByZWxvYWRlci1jaXJjbGVzLXdpZHRoKSArICgodmFyKC0tc2duLXByZWxvYWRlci1zdHJpcGVzLXdpZHRoKSArIHZhcigtLXNnbi1wcmVsb2FkZXItY2lyY2xlcy1tYXJnaW4pKSAqIDIpICogNykgKyB2YXIoLS1zZ24tcHJlbG9hZGVyLWNpcmNsZXMtcmFkaXVzKSk7DQp9DQoNCkAtbW96LWtleWZyYW1lcyByb3RhdGUgew0KXHR0byB7DQpcdFx0dHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsNClx0fQ0KfQ0KQC13ZWJraXQta2V5ZnJhbWVzIHJvdGF0ZSB7DQpcdHRvIHsNClx0XHR0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOw0KXHR9DQp9DQpAa2V5ZnJhbWVzIHJvdGF0ZSB7DQpcdHRvIHsNClx0XHR0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOw0KXHR9DQp9DQoNCg0KYDsNCgkJY29uc3QgaGVhZCAgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoZWFkIilbMF0sDQoJCSAgICAgIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3R5bGUiKTsNCg0KCQloZWFkLmFwcGVuZENoaWxkKHN0eWxlKTsNCgkJc3R5bGUudHlwZSA9ICJ0ZXh0L2NzcyI7DQoJCXN0eWxlLmlkID0gInNnbi11aWtpdC1zdHlsZXMiOw0KCQlpZihzdHlsZS5zdHlsZVNoZWV0KSB7DQoJCQkvLyBUaGlzIGlzIHJlcXVpcmVkIGZvciBJRTggYW5kIGJlbG93Lg0KCQkJc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzOw0KCQl9IGVsc2Ugew0KCQkJc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7DQoJCX0NCgl9KSgpOw0KCShmdW5jdGlvbigpIHsNCgkJbGV0IHByZWxvYWRlckVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsNCgkJcHJlbG9hZGVyRWxlbS5jbGFzc05hbWUgPSAic2duLXByZWxvYWRlciI7DQoJCWxldCBwcmVsb2FkZXIgPSBgXHRcdFx0PGRpdiBjbGFzcz0icHJlbG9hZGVyIj5cbmA7DQoJCS8vcHJlbG9hZGVyICs9IGBcdFx0XHRcdDxpbWcgc3JjPSI8Pz0kcHVibGljX2ltZ0Fzc2V0czs/Pmljb25zL3hzbWFsbC5wbmciPlxuYDsNCgkJcHJlbG9hZGVyICs9IGBcdFx0XHRcdDxkaXYgY2xhc3M9InNwaW5uZXIiPlxuYDsNCgkJcHJlbG9hZGVyICs9IGBcdFx0XHRcdFx0PGk+PC9pPlxuYDsNCgkJcHJlbG9hZGVyICs9IGBcdFx0XHRcdFx0PGk+PC9pPlxuYDsNCgkJcHJlbG9hZGVyICs9IGBcdFx0XHRcdFx0PGk+PC9pPlxuYDsNCgkJcHJlbG9hZGVyICs9IGBcdFx0XHRcdFx0PGk+PC9pPlxuYDsNCgkJcHJlbG9hZGVyICs9IGBcdFx0XHRcdFx0PGk+PC9pPlxuYDsNCgkJcHJlbG9hZGVyICs9IGBcdFx0XHRcdFx0PGk+PC9pPlxuYDsNCgkJcHJlbG9hZGVyICs9IGBcdFx0XHRcdFx0PGk+PC9pPlxuYDsNCgkJcHJlbG9hZGVyICs9IGBcdFx0XHRcdFx0PGk+PC9pPlxuYDsNCgkJcHJlbG9hZGVyICs9IGBcdFx0XHRcdDwvZGl2PlxuYDsNCgkJcHJlbG9hZGVyICs9IGBcdFx0XHQ8L2Rpdj5cbmA7DQoJCXByZWxvYWRlciArPSBgXHRcdDwvZGl2PlxuYDsNCg0KCQlwcmVsb2FkZXJFbGVtLmlubmVySFRNTCA9IHByZWxvYWRlcjsNCg0KCQl3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7DQoJCQlkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSArPSAiIGhhcy1wcmVsb2FkZXIiOw0KCQkJZG9jdW1lbnQuYm9keS5pbnNlcnRCZWZvcmUocHJlbG9hZGVyRWxlbSwgZG9jdW1lbnQuYm9keS5maXJzdENoaWxkKTsNCgkJfTsNCgl9KSgpOw0KDQoJY29uc3QgY3VycmVudFNjcmlwdCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcigic2NyaXB0W3NyYyo9XCJTR05VSUtpdC5sb2FkZXIuanNcIl0iKTsNCgljb25zdCB1cmwgPSBjdXJyZW50U2NyaXB0LnNyYy5zcGxpdCgiLyIpLnNsaWNlKDAsIC0yKS5qb2luKCIvIikgKyAiLyI7DQoJY29uc3QgcHJlbG9hZCA9IFsNCgkJLy8nanMvaTE4bi9TR05pMThuLmpzJw0KCV07DQoNCglsZXQgZmlsZXNsb2FkZWQgPSAwOw0KCWNvbnN0IGZpbGVzdG9sb2FkID0gcHJlbG9hZC5sZW5ndGg7DQoNCglpZihmaWxlc3RvbG9hZCA+IDApIHsNCgkJZm9yKGxldCBpID0gMDsgaSA8IGZpbGVzdG9sb2FkOyBpKyspIHsNCgkJCWNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOw0KCQkJc2NyaXB0LnNyYyA9IHVybCArIHByZWxvYWRbaV07DQoJCQlzY3JpcHQuYXN5bmMgPSBmYWxzZTsNCgkJCXNjcmlwdC5kZWZlciA9IGZhbHNlOw0KCQkJY3VycmVudFNjcmlwdC5hZnRlcihzY3JpcHQpOw0KCQkJaWYoaSA9PT0gMCkNCgkJCQlzY3JpcHQuaWQgPSAic2duLXByZWxvYWQtZW5kIjsNCgkJCXNjcmlwdC5vbmxvYWQgPSBmdW5jdGlvbigpIHsNCgkJCQlmaWxlc2xvYWRlZCsrOw0KCQkJCXNjcmlwdC5vbmxvYWQgPSBudWxsOw0KCQkJCWZpbmlzaExvYWQoKTsNCgkJCX07DQoJCX0NCgl9IGVsc2UNCgkJZmluaXNoTG9hZCgpOw0KDQoJYXN5bmMgZnVuY3Rpb24gZmluaXNoTG9hZCgpIHsNCgkJbGV0IHByb2dyZXNzID0gTWF0aC5yb3VuZCgoZmlsZXNsb2FkZWQgKiAxMDApIC8gZmlsZXN0b2xvYWQpIHx8IDEwMDsNCg0KCQlhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsNCgkJCWlmKGZpbGVzbG9hZGVkID49IGZpbGVzdG9sb2FkKSB7DQoJCQkJcmVzb2x2ZSgpOw0KCQkJfQ0KCQl9KS50aGVuKGZ1bmN0aW9uKCkgew0KCQkJLy9pbXBvcnQoJy4vaGVscGVycy9oZWxwZXJzLmpzJyk7DQoJCQkkKCJoZWFkID4gdGl0bGUiKS50ZXh0KHRpdGxlKTsNCgkJCWlmKHR5cGVvZiBwcmVjYWxsYmFjayA9PT0gImZ1bmN0aW9uIiAmJiBwcm9ncmVzcyA9PT0gMTAwKQ0KCQkJCXByZWNhbGxiYWNrKCk7DQoJCX0pOw0KCX0NCn0pKGZ1bmN0aW9uKCkgew0KCShhc3luYyBmdW5jdGlvbihjYWxsYmFjaykgew0KCQljb25zdCBzZ251aWtpdFNjcmlwdCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcigic2NyaXB0W3NyYyo9XCJTR05VSUtpdC5sb2FkZXIuanNcIl0iKTsNCgkJY29uc3QgY3VycmVudFNjcmlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzZ24tcHJlbG9hZC1lbmQiKSB8fCBzZ251aWtpdFNjcmlwdDsNCg0KCQlmdW5jdGlvbiBnZXRTY3JpcHRVUkwoKSB7DQoJCQlyZXR1cm4gc2dudWlraXRTY3JpcHQuc3JjOw0KCQl9DQoNCgkJY29uc3QgdXJsID0gZ2V0U2NyaXB0VVJMKCkuc3BsaXQoIi8iKS5zbGljZSgwLCAtMikuam9pbigiLyIpICsgIi8iOw0KDQoJCXNldFRpbWVvdXQoZnVuY3Rpb24oKSB7DQoJCQlzdGFydExvYWQoKTsNCgkJfSwgNTAwMCk7DQoNCgkJZnVuY3Rpb24gc3RhcnRMb2FkKCkgew0KCQkJY29uc3Qgc2NyaXB0cyA9IFsNCgkJCQkianMvU0dOVUlLaXQuYnVuZGxlLmpzIiwNCgkJCV07DQoJCQljb25zdCBzdHlsZXMgPSBbDQoJCQkJImNzcy9TR05VSUtpdC5idW5kbGUuY3NzIiwNCgkJCV07DQoJCQlsZXQgZmlsZXNsb2FkZWQgPSAwLA0KCQkJICAgIGxhc3RTY3JpcHQgID0gY3VycmVudFNjcmlwdDsNCgkJCWNvbnN0IGZpbGVzdG9sb2FkID0gc2NyaXB0cy5sZW5ndGggKyBzdHlsZXMubGVuZ3RoOw0KDQoJCQlmdW5jdGlvbiBsb2FkU2NyaXB0KGkpIHsNCgkJCQlpZihpID09PSBzY3JpcHRzLmxlbmd0aCkgcmV0dXJuOw0KDQoJCQkJY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7DQoJCQkJc2NyaXB0LnNyYyA9IHVybCArIHNjcmlwdHNbaV07DQoJCQkJc2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkgew0KCQkJCQlmaWxlc2xvYWRlZCsrOw0KCQkJCQlTR05VSUtpdC5jb21wb25lbnQgPSB7DQoJCQkJCQlpOiBzY3JpcHRzW2ldLA0KCQkJCQl9Ow0KCQkJCQlzY3JpcHQub25sb2FkID0gbnVsbDsNCgkJCQkJLy9jb25zb2xlLmxvZyhgTE9BREVEIFNDUklQVDogJHtzY3JpcHQuc3JjfWAsIGAke2l9LyR7ZmlsZXN0b2xvYWR9YCk7DQoJCQkJCWZpbmlzaExvYWQoKTsNCgkJCQkJbG9hZFNjcmlwdCgrK2kpOw0KCQkJCX07DQoJCQkJbGFzdFNjcmlwdC5hZnRlcihzY3JpcHQpOw0KCQkJCWxhc3RTY3JpcHQgPSBsYXN0U2NyaXB0Lm5leHRFbGVtZW50U2libGluZyB8fCBjdXJyZW50U2NyaXB0Ow0KCQkJfQ0KDQoJCQlmdW5jdGlvbiBsb2FkU3R5bGUoaSkgew0KCQkJCWlmKGkgPT09IHNjcmlwdHMubGVuZ3RoKSByZXR1cm47DQoNCgkJCQljb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImxpbmsiKTsNCgkJCQlzdHlsZS5yZWwgPSAic3R5bGVzaGVldCI7DQoJCQkJc3R5bGUuaHJlZiA9IHVybCArIHN0eWxlc1tpXTsNCgkJCQlzdHlsZS5vbmxvYWQgPSBmdW5jdGlvbigpIHsNCgkJCQkJZmlsZXNsb2FkZWQrKzsNCgkJCQkJc3R5bGUub25sb2FkID0gbnVsbDsNCgkJCQkJZmluaXNoTG9hZCgpOw0KCQkJCQlsb29wKCsraSk7DQoJCQkJfTsNCgkJCQljdXJyZW50U2NyaXB0LmFmdGVyKHN0eWxlKTsNCgkJCX0NCg0KCQkJbG9hZFNjcmlwdCgwKTsNCgkJCWxvYWRTdHlsZSgwKTsNCg0KCQkJYXN5bmMgZnVuY3Rpb24gZmluaXNoTG9hZCgpIHsNCgkJCQljb25zdCBwcm9ncmVzcyA9IE1hdGgucm91bmQoKGZpbGVzbG9hZGVkICogMTAwKSAvIGZpbGVzdG9sb2FkKTsNCg0KCQkJCWlmKHR5cGVvZiBjYWxsYmFjayA9PT0gImZ1bmN0aW9uIikgew0KCQkJCQljYWxsYmFjayhmaWxlc2xvYWRlZCwgZmlsZXN0b2xvYWQsIHByb2dyZXNzKTsNCgkJCQl9DQoJCQl9DQoJCX0NCgl9KShhc3luYyBmdW5jdGlvbihsb2FkZWQsIHRvdGFsLCBwcm9ncmVzcykgew0KCQlpZihwcm9ncmVzcyA9PT0gMTAwKSB7DQoJCQkvL2ltcG9ydCgnLi9pMThuL1NHTmkxOG4uanMnKTsNCgkJCS8vaW1wb3J0KCcuL2NvbXBvbmVudHMvY29tcG9uZW50cy5qcycpOw0KCQkJU0dOVUlLaXQucmVhZHkgPSB0cnVlOw0KCQkJd2luZG93LlNHTlVJS2l0UmVhZHkgPSB0cnVlOw0KDQoJCQljb25zdCBsZWZ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcigic3R5bGVbZGF0YS1ja2U9XCJ0cnVlXCJdIik7DQoJCQlpZihsZWZ0ICE9PSBudWxsKQ0KCQkJCWxlZnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsZWZ0KTsNCg0KCQkJc2V0VGltZW91dChmdW5jdGlvbigpIHsNCgkJCQkkLmhvbGRSZWFkeShmYWxzZSk7DQoJCQkJalF1ZXJ5LnJlYWR5KCk7DQoNCgkJCQkkKCJib2R5IikuY2hpbGRyZW4oIi5zZ24tcHJlbG9hZGVyIikuZmFkZU91dCgyMDAwLCBmdW5jdGlvbigpIHsNCgkJCQkJJCgiYm9keSIpLmNoaWxkcmVuKCIuc2duLXByZWxvYWRlciIpLnJlbW92ZSgpOw0KCQkJCQkkKCJib2R5IikucmVtb3ZlQ2xhc3MoImhhcy1wcmVsb2FkZXIiKTsNCgkJCQl9KTsNCgkJCX0sIDUwMDApOw0KDQoJCX0NCgl9KTsNCn0pOw0KDQoNCmFzeW5jIGZ1bmN0aW9uIGdldFNHTkkxOG5JbnN0YW5jZShjYWxsYmFjaykgew0KCXJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7DQoJCWNvbnN0IHRpbWVvdXRIYW5kbGVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsNCgkJCWlmKGNoZWNrSW50ZXJ2YWxIYW5kbGVyKQ0KCQkJCWNsZWFySW50ZXJ2YWwoY2hlY2tJbnRlcnZhbEhhbmRsZXIpOw0KCQl9LCAxMDAwMCk7DQoNCgkJY29uc3QgY2hlY2tJbnRlcnZhbEhhbmRsZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHsNCgkJCWlmKHdpbmRvdy5TR05VSUtpdFJlYWR5KSB7DQoJCQkJaWYodGltZW91dEhhbmRsZXIpDQoJCQkJCWNsZWFyVGltZW91dCh0aW1lb3V0SGFuZGxlcik7DQoJCQkJY2xlYXJJbnRlcnZhbChjaGVja0ludGVydmFsSGFuZGxlcik7DQoJCQkJY29uc3QgYyA9IG5ldyBTR05pMThuKCk7DQoNCgkJCQlyZXNvbHZlKGMpOw0KCQkJfQ0KCQl9LCAxMDApOw0KCX0pOw0KfQ0KDQo=";
for(let i = 2; i < argv.length; i++) {
	const v = argv[i].replace("--", "");
	i++;
	args[v] = argv[i];
}

const v = info.version.split(".");

const version = {
	"major": v[0] | 0,
	"minor": v[1] | 0,
	"patch": v[2] | 0,
};

module.exports = {
	args, SGNUIKitLoader, version, cdn_dir,
};
